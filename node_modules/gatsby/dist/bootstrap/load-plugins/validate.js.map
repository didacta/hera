{"version":3,"sources":["../../../src/bootstrap/load-plugins/validate.js"],"names":["_","require","reporter","resolveModuleExports","getBadExports","plugin","pluginAPIKeys","apis","badExports","concat","difference","map","e","exportName","pluginName","name","pluginVersion","version","getBadExportsMessage","exportType","stripIndent","stringSimiliarity","capitalized","toUpperCase","slice","message","forEach","bady","similarities","findBestMatch","isDefaultPlugin","isModifyWebpackConfig","bestMatch","rating","target","handleBadExports","isBad","toPairs","badItem","entries","length","console","log","collatePluginAPIs","flattenedPlugins","allAPIs","node","browser","ssr","apiToPlugins","reduce","acc","value","nodeAPIs","browserAPIs","ssrAPIs","pluginNodeExports","resolve","pluginBrowserExports","pluginSSRExports","intersection","nodeAPI","push","browserAPI","ssrAPI","handleMultipleReplaceRenderers","replaceRenderer","rendererPlugins","includes","warn","join","error","process","env","NODE_ENV","exit","ignorable","messages","fp","i","skipSSR","m","module","exports"],"mappings":";;AAAA,MAAMA,IAAIC,QAAS,QAAT,CAAV;;AAEA,MAAMC,WAAWD,QAAS,yBAAT,CAAjB;;AACA,MAAME,uBAAuBF,QAAS,2BAAT,CAA7B,C,CAEA;AACA;;;AACA,MAAMG,gBAAgB,CAACC,MAAD,EAASC,aAAT,EAAwBC,IAAxB,KAAiC;AACrD,MAAIC,aAAa,EAAjB,CADqD,CAErD;;AACAA,eAAaA,WAAWC,MAAX,CACXT,EAAEU,UAAF,CAAaJ,aAAb,EAA4BC,IAA5B,EAAkCI,GAAlC,CAAsCC,KAAK;AACzC,WAAO;AACLC,kBAAYD,CADP;AAELE,kBAAYT,OAAOU,IAFd;AAGLC,qBAAeX,OAAOY;AAHjB,KAAP;AAKD,GAND,CADW,CAAb;AASA,SAAOT,UAAP;AACD,CAbD;;AAeA,MAAMU,uBAAuB,CAACV,UAAD,EAAaW,UAAb,EAAyBZ,IAAzB,KAAkC;AAAA,mBACrCN,QAAS,aAAT,CADqC;AAAA,QACrDmB,WADqD,YACrDA,WADqD;;AAE7D,QAAMC,oBAAoBpB,QAAS,mBAAT,CAA1B;;AACA,MAAIqB,cAAe,GAAEH,WAAW,CAAX,EAAcI,WAAd,EAA4B,GAAEJ,WAAWK,KAAX,CAAiB,CAAjB,CAAoB,EAAvE;AACA,MAAIF,gBAAiB,KAArB,EAA2BA,cAAe,KAAf;AAE3B,MAAIG,UAAW,IAAf;AACAA,aAAWL,WAAY;4DACmCD,UAAW;;;wCAG/BA,UAAW,iCAAgCG,WAAY;GAJ7F;AAOAd,aAAWkB,OAAX,CAAmBC,QAAQ;AACzBF,eAAY,MAAZ;AACA,UAAMG,eAAeP,kBAAkBQ,aAAlB,CAAgCF,KAAKd,UAArC,EAAiDN,IAAjD,CAArB;AACA,UAAMuB,kBAAkBH,KAAKb,UAAL,IAAoB,qBAA5C;AACA,UAAMiB,wBAAwBJ,KAAKd,UAAL,KAAqB,qBAAnD;;AAEA,QAAIiB,mBAAmBC,qBAAvB,EAA8C;AAC5CN,iBAAWL,WAAY;+BACED,UAAW,qBAAqBQ,KAAKd,UAAY;OAD1E;AAGAY,iBAAY,6CAAZ;AACD,KALD,MAKO,IAAIK,eAAJ,EAAqB;AAC1BL,iBAAWL,WAAY;+BACED,UAAW,sCAChCQ,KAAKd,UACN;OAHH;AAKD,KANM,MAMA;AACLY,iBAAWL,WAAY;wBACLO,KAAKb,UAAW,IAC9Ba,KAAKX,aACN,oCAAmCW,KAAKd,UAAW;OAHtD;AAKD;;AAED,QAAIe,aAAaI,SAAb,CAAuBC,MAAvB,GAAgC,GAAhC,IAAuC,CAACF,qBAA5C,EAAmE;AACjEN,iBAAY,MAAZ;AACAA,iBAAY,gCACVG,aAAaI,SAAb,CAAuBE,MACxB,IAFD;AAGD;AACF,GA/BD;AAiCA,SAAOT,OAAP;AACD,CAhDD;;AAkDA,MAAMU,mBAAmB,CAAC;AAAE5B,MAAF;AAAQC;AAAR,CAAD,KAA0B;AACjD;AACA,MAAI4B,QAAQ,KAAZ;;AACApC,IAAEqC,OAAF,CAAU7B,UAAV,EAAsBkB,OAAtB,CAA8BY,WAAW;AAAA,UAChCnB,UADgC,GACTmB,OADS;AAAA,UACpBC,OADoB,GACTD,OADS;;AAEvC,QAAIC,QAAQC,MAAR,GAAiB,CAArB,EAAwB;AACtBJ,cAAQ,IAAR;AACAK,cAAQC,GAAR,CAAYxB,qBAAqBqB,OAArB,EAA8BpB,UAA9B,EAA0CZ,KAAKY,UAAL,CAA1C,CAAZ;AACD;AACF,GAND;;AAOA,SAAOiB,KAAP;AACD,CAXD;AAaA;;;;;AAGA,MAAMO,oBAAoB,CAAC;AAAEpC,MAAF;AAAQqC;AAAR,CAAD,KAAgC;AACxD,QAAMC,UAAU,CAAC,GAAGtC,KAAKuC,IAAT,EAAe,GAAGvC,KAAKwC,OAAvB,EAAgC,GAAGxC,KAAKyC,GAAxC,CAAhB;AACA,QAAMC,eAAeJ,QAAQK,MAAR,CAAe,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAClDD,QAAIC,KAAJ,IAAa,EAAb;AACA,WAAOD,GAAP;AACD,GAHoB,EAGlB,EAHkB,CAArB,CAFwD,CAOxD;;AACA,QAAM3C,aAAa;AACjBsC,UAAM,EADW;AAEjBC,aAAS,EAFQ;AAGjBC,SAAK;AAHY,GAAnB;AAMAJ,mBAAiBlB,OAAjB,CAAyBrB,UAAU;AACjCA,WAAOgD,QAAP,GAAkB,EAAlB;AACAhD,WAAOiD,WAAP,GAAqB,EAArB;AACAjD,WAAOkD,OAAP,GAAiB,EAAjB,CAHiC,CAKjC;AACA;AACA;;AACA,UAAMC,oBAAoBrD,qBACvB,GAAEE,OAAOoD,OAAQ,cADM,CAA1B;AAGA,UAAMC,uBAAuBvD,qBAC1B,GAAEE,OAAOoD,OAAQ,iBADS,CAA7B;AAGA,UAAME,mBAAmBxD,qBACtB,GAAEE,OAAOoD,OAAQ,aADK,CAAzB;;AAIA,QAAID,kBAAkBhB,MAAlB,GAA2B,CAA/B,EAAkC;AAChCnC,aAAOgD,QAAP,GAAkBrD,EAAE4D,YAAF,CAAeJ,iBAAf,EAAkCjD,KAAKuC,IAAvC,CAAlB;AACAzC,aAAOgD,QAAP,CAAgB1C,GAAhB,CAAoBkD,WAAWZ,aAAaY,OAAb,EAAsBC,IAAtB,CAA2BzD,OAAOU,IAAlC,CAA/B;AACAP,iBAAWsC,IAAX,GAAkBtC,WAAWsC,IAAX,CAAgBrC,MAAhB,CAChBL,cAAcC,MAAd,EAAsBmD,iBAAtB,EAAyCjD,KAAKuC,IAA9C,CADgB,CAAlB,CAHgC,CAK9B;AACH;;AAED,QAAIY,qBAAqBlB,MAArB,GAA8B,CAAlC,EAAqC;AACnCnC,aAAOiD,WAAP,GAAqBtD,EAAE4D,YAAF,CAAeF,oBAAf,EAAqCnD,KAAKwC,OAA1C,CAArB;AACA1C,aAAOiD,WAAP,CAAmB3C,GAAnB,CAAuBoD,cACrBd,aAAac,UAAb,EAAyBD,IAAzB,CAA8BzD,OAAOU,IAArC,CADF;AAGAP,iBAAWuC,OAAX,GAAqBvC,WAAWuC,OAAX,CAAmBtC,MAAnB,CACnBL,cAAcC,MAAd,EAAsBqD,oBAAtB,EAA4CnD,KAAKwC,OAAjD,CADmB,CAArB,CALmC,CAOjC;AACH;;AAED,QAAIY,iBAAiBnB,MAAjB,GAA0B,CAA9B,EAAiC;AAC/BnC,aAAOkD,OAAP,GAAiBvD,EAAE4D,YAAF,CAAeD,gBAAf,EAAiCpD,KAAKyC,GAAtC,CAAjB;AACA3C,aAAOkD,OAAP,CAAe5C,GAAf,CAAmBqD,UAAUf,aAAae,MAAb,EAAqBF,IAArB,CAA0BzD,OAAOU,IAAjC,CAA7B;AACAP,iBAAWwC,GAAX,GAAiBxC,WAAWwC,GAAX,CAAevC,MAAf,CACfL,cAAcC,MAAd,EAAsBsD,gBAAtB,EAAwCpD,KAAKyC,GAA7C,CADe,CAAjB,CAH+B,CAK7B;AACH;AACF,GA3CD;AA6CA,SAAO;AAAEC,gBAAF;AAAgBL,oBAAhB;AAAkCpC;AAAlC,GAAP;AACD,CA5DD;;AA8DA,MAAMyD,iCAAiC,CAAC;AAAEhB,cAAF;AAAgBL;AAAhB,CAAD,KAAwC;AAC7E;AACA,MAAIK,aAAaiB,eAAb,CAA6B1B,MAA7B,GAAsC,CAA1C,EAA6C;AAC3C,UAAM2B,kBAAkB,CAAC,GAAGlB,aAAaiB,eAAjB,CAAxB;;AAEA,QAAIC,gBAAgBC,QAAhB,CAA0B,qBAA1B,CAAJ,EAAqD;AACnDlE,eAASmE,IAAT,CAAe,6CAAf;AACAnE,eAASmE,IAAT,CAAcF,gBAAgBG,IAAhB,CAAsB,IAAtB,CAAd;AACApE,eAASmE,IAAT,CACG,4FADH;AAGD,KAND,MAMO;AACL5B,cAAQC,GAAR,CAAa,EAAb;AACAxC,eAASqE,KAAT,CACG,kEADH;AAGArE,eAASqE,KAAT,CAAeJ,gBAAgBG,IAAhB,CAAsB,IAAtB,CAAf;AACApE,eAASqE,KAAT,CAAgB,4BAAhB;AACArE,eAASqE,KAAT,CACG,oEADH;AAGA,UAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAA0B,YAA9B,EAA2CF,QAAQG,IAAR,CAAa,CAAb;AAC5C,KApB0C,CAsB3C;;;AACA,UAAMC,YAAYT,gBAAgB3C,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,CAAlB,CAvB2C,CAyB3C;AACA;;AACA,UAAMqD,WAAW,EAAjB;AACAjC,qBAAiBlB,OAAjB,CAAyB,CAACoD,EAAD,EAAKC,CAAL,KAAW;AAClC,UAAIH,UAAUR,QAAV,CAAmBU,GAAG/D,IAAtB,CAAJ,EAAiC;AAC/B8D,iBAASf,IAAT,CACG,uEACCgB,GAAG/D,IACJ,EAHH;AAKA6B,yBAAiBmC,CAAjB,EAAoBC,OAApB,GAA8B,IAA9B;AACD;AACF,KATD;;AAUA,QAAIH,SAASrC,MAAT,GAAkB,CAAtB,EAAyB;AACvBC,cAAQC,GAAR,CAAa,EAAb;AACAmC,eAASnD,OAAT,CAAiBuD,KAAK/E,SAASmE,IAAT,CAAcY,CAAd,CAAtB;AACAxC,cAAQC,GAAR,CAAa,EAAb;AACD;AACF;;AAED,SAAOE,gBAAP;AACD,CAhDD;;AAkDAsC,OAAOC,OAAP,GAAiB;AACfxC,mBADe;AAEfR,kBAFe;AAGf8B;AAHe,CAAjB","sourcesContent":["const _ = require(`lodash`)\n\nconst reporter = require(`gatsby-cli/lib/reporter`)\nconst resolveModuleExports = require(`../resolve-module-exports`)\n\n// Given a plugin object, an array of the API names it exports and an\n// array of valid API names, return an array of invalid API exports.\nconst getBadExports = (plugin, pluginAPIKeys, apis) => {\n  let badExports = []\n  // Discover any exports from plugins which are not \"known\"\n  badExports = badExports.concat(\n    _.difference(pluginAPIKeys, apis).map(e => {\n      return {\n        exportName: e,\n        pluginName: plugin.name,\n        pluginVersion: plugin.version,\n      }\n    })\n  )\n  return badExports\n}\n\nconst getBadExportsMessage = (badExports, exportType, apis) => {\n  const { stripIndent } = require(`common-tags`)\n  const stringSimiliarity = require(`string-similarity`)\n  let capitalized = `${exportType[0].toUpperCase()}${exportType.slice(1)}`\n  if (capitalized === `Ssr`) capitalized = `SSR`\n\n  let message = `\\n`\n  message += stripIndent`\n    Your plugins must export known APIs from their gatsby-${exportType}.js.\n    The following exports aren't APIs. Perhaps you made a typo or your plugin is outdated?\n\n    See https://www.gatsbyjs.org/docs/${exportType}-apis/ for the list of Gatsby ${capitalized} APIs\n  `\n\n  badExports.forEach(bady => {\n    message += `\\n\\n`\n    const similarities = stringSimiliarity.findBestMatch(bady.exportName, apis)\n    const isDefaultPlugin = bady.pluginName == `default-site-plugin`\n    const isModifyWebpackConfig = bady.exportName === `modifyWebpackConfig`\n\n    if (isDefaultPlugin && isModifyWebpackConfig) {\n      message += stripIndent`\n        - Your site's gatsby-${exportType}.js is exporting \"${ bady.exportName }\" which was removed in Gatsby v2. Refer to the migration guide for more info on upgrading to \"onCreateWebpackConfig\":\n      `\n      message += `\\n https://gatsby.app/update-webpack-config`\n    } else if (isDefaultPlugin) {\n      message += stripIndent`\n        - Your site's gatsby-${exportType}.js is exporting a variable named \"${\n          bady.exportName\n        }\" which isn't an API.\n      `\n    } else {\n      message += stripIndent`\n        - The plugin \"${bady.pluginName}@${\n          bady.pluginVersion\n        }\" is exporting a variable named \"${bady.exportName}\" which isn't an API.\n      `\n    }\n\n    if (similarities.bestMatch.rating > 0.5 && !isModifyWebpackConfig) {\n      message += `\\n\\n`\n      message += `Perhaps you meant to export \"${\n        similarities.bestMatch.target\n      }\"?`\n    }\n  })\n\n  return message\n}\n\nconst handleBadExports = ({ apis, badExports }) => {\n  // Output error messages for all bad exports\n  let isBad = false\n  _.toPairs(badExports).forEach(badItem => {\n    const [exportType, entries] = badItem\n    if (entries.length > 0) {\n      isBad = true\n      console.log(getBadExportsMessage(entries, exportType, apis[exportType]))\n    }\n  })\n  return isBad\n}\n\n/**\n * Identify which APIs each plugin exports\n */\nconst collatePluginAPIs = ({ apis, flattenedPlugins }) => {\n  const allAPIs = [...apis.node, ...apis.browser, ...apis.ssr]\n  const apiToPlugins = allAPIs.reduce((acc, value) => {\n    acc[value] = []\n    return acc\n  }, {})\n\n  // Get a list of bad exports\n  const badExports = {\n    node: [],\n    browser: [],\n    ssr: [],\n  }\n\n  flattenedPlugins.forEach(plugin => {\n    plugin.nodeAPIs = []\n    plugin.browserAPIs = []\n    plugin.ssrAPIs = []\n\n    // Discover which APIs this plugin implements and store an array against\n    // the plugin node itself *and* in an API to plugins map for faster lookups\n    // later.\n    const pluginNodeExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-node`\n    )\n    const pluginBrowserExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-browser`\n    )\n    const pluginSSRExports = resolveModuleExports(\n      `${plugin.resolve}/gatsby-ssr`\n    )\n\n    if (pluginNodeExports.length > 0) {\n      plugin.nodeAPIs = _.intersection(pluginNodeExports, apis.node)\n      plugin.nodeAPIs.map(nodeAPI => apiToPlugins[nodeAPI].push(plugin.name))\n      badExports.node = badExports.node.concat(\n        getBadExports(plugin, pluginNodeExports, apis.node)\n      ) // Collate any bad exports\n    }\n\n    if (pluginBrowserExports.length > 0) {\n      plugin.browserAPIs = _.intersection(pluginBrowserExports, apis.browser)\n      plugin.browserAPIs.map(browserAPI =>\n        apiToPlugins[browserAPI].push(plugin.name)\n      )\n      badExports.browser = badExports.browser.concat(\n        getBadExports(plugin, pluginBrowserExports, apis.browser)\n      ) // Collate any bad exports\n    }\n\n    if (pluginSSRExports.length > 0) {\n      plugin.ssrAPIs = _.intersection(pluginSSRExports, apis.ssr)\n      plugin.ssrAPIs.map(ssrAPI => apiToPlugins[ssrAPI].push(plugin.name))\n      badExports.ssr = badExports.ssr.concat(\n        getBadExports(plugin, pluginSSRExports, apis.ssr)\n      ) // Collate any bad exports\n    }\n  })\n\n  return { apiToPlugins, flattenedPlugins, badExports }\n}\n\nconst handleMultipleReplaceRenderers = ({ apiToPlugins, flattenedPlugins }) => {\n  // multiple replaceRenderers may cause problems at build time\n  if (apiToPlugins.replaceRenderer.length > 1) {\n    const rendererPlugins = [...apiToPlugins.replaceRenderer]\n\n    if (rendererPlugins.includes(`default-site-plugin`)) {\n      reporter.warn(`replaceRenderer API found in these plugins:`)\n      reporter.warn(rendererPlugins.join(`, `))\n      reporter.warn(\n        `This might be an error, see: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n    } else {\n      console.log(``)\n      reporter.error(\n        `Gatsby's replaceRenderer API is implemented by multiple plugins:`\n      )\n      reporter.error(rendererPlugins.join(`, `))\n      reporter.error(`This will break your build`)\n      reporter.error(\n        `See: https://www.gatsbyjs.org/docs/debugging-replace-renderer-api/`\n      )\n      if (process.env.NODE_ENV === `production`) process.exit(1)\n    }\n\n    // Now update plugin list so only final replaceRenderer will run\n    const ignorable = rendererPlugins.slice(0, -1)\n\n    // For each plugin in ignorable, set a skipSSR flag to true\n    // This prevents apiRunnerSSR() from attempting to run it later\n    const messages = []\n    flattenedPlugins.forEach((fp, i) => {\n      if (ignorable.includes(fp.name)) {\n        messages.push(\n          `Duplicate replaceRenderer found, skipping gatsby-ssr.js for plugin: ${\n            fp.name\n          }`\n        )\n        flattenedPlugins[i].skipSSR = true\n      }\n    })\n    if (messages.length > 0) {\n      console.log(``)\n      messages.forEach(m => reporter.warn(m))\n      console.log(``)\n    }\n  }\n\n  return flattenedPlugins\n}\n\nmodule.exports = {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n}\n"],"file":"validate.js"}